generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  username          String    @unique
  password          String
  fullName          String
  bio               String?
  website           String?
  avatarUrl         String?   @default("")
  tokenVersion      Int       @default(0)
  resetToken        String?
  resetTokenExpires DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  posts                  Post[]
  likes                  Like[]
  comments               Comment[]
  commentLikes           CommentLike[]
  followers              Follows[]      @relation("following")
  following              Follows[]      @relation("follower")
  notifications          Notification[] @relation("userNotifications")
  notificationsTriggered Notification[] @relation("userFromNotifications")
  Notification           Notification[]
  sentMessages           ChatMessage[]  @relation("sentMessages")
  receivedMessages       ChatMessage[]  @relation("receivedMessages")
  chatRooms              ChatRoom[]     @relation(fields: [chatRoomIds], references: [id])
  chatRoomIds            String[]       @db.ObjectId
  messages               ChatMessage[]

  @@map("users")
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String?
  imageUrl  String
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes        Like[]
  comments     Comment[]
  Notification Notification[]

  @@map("posts")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post  Post          @relation(fields: [postId], references: [id])
  user  User          @relation(fields: [userId], references: [id])
  likes CommentLike[]

  @@map("comments")
}

model CommentLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  commentId String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([commentId, userId])
  @@map("comment_likes")
}

model Follows {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follows")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  userId    String   @db.ObjectId
  fromId    String   @db.ObjectId
  postId    String?  @db.ObjectId
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user     User  @relation("userNotifications", fields: [userId], references: [id])
  fromUser User  @relation("userFromNotifications", fields: [fromId], references: [id])
  post     Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  User     User  @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model ChatMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatRoomId String   @db.ObjectId

  sender   User     @relation("sentMessages", fields: [senderId], references: [id])
  receiver User     @relation("receivedMessages", fields: [receiverId], references: [id])
  ChatRoom ChatRoom @relation(fields: [chatRoomId], references: [id])
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?  @db.ObjectId

  @@map("chat_messages")
}

model ChatRoom {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  participants User[]        @relation(fields: [userIds], references: [id])
  userIds      String[]      @db.ObjectId
  messages     ChatMessage[]
  updatedAt    DateTime      @updatedAt
  createdAt    DateTime      @default(now())

  @@map("chat_rooms")
}
